{"changed":false,"filter":false,"title":"server.js","tooltip":"/server.js","value":"//\n// # SimpleServer\n//\n// A simple chat server using Socket.IO, Express, and Async.\n//\nvar http = require('http');\nvar path = require('path');\n\nvar async = require('async');\nvar socketio = require('socket.io');\nvar express = require('express');\n\n//set up discovery instance\nvar DiscoveryV1 = require('watson-developer-cloud/discovery/v1');\n//define a discovery object with our credentials\nvar discovery = new DiscoveryV1({\n  username: '5d158f99-62ee-448a-b172-b3c66c5dfce8',\n  password: 'imBJJCr07OYZ',\n  version_date: '2017-11-07'\n});\n\n\n//\n// ## SimpleServer `SimpleServer(obj)`\n//\n// Creates a new instance of SimpleServer with the following options:\n//  * `port` - The HTTP port to listen on. If `process.env.PORT` is set, _it overrides this value_.\n//\nvar router = express();\nvar server = http.createServer(router);\nvar io = socketio.listen(server);\n\nrouter.use(express.static(path.resolve(__dirname, 'client')));\nvar messages = [];\nvar sockets = [];\n\nio.on('connection', function (socket) {\n    messages.forEach(function (data) {\n      socket.emit('message', data);\n    });\n\n    sockets.push(socket);\n\n    socket.on('disconnect', function () {\n      sockets.splice(sockets.indexOf(socket), 1);\n      updateRoster();\n    });\n\n    socket.on('message', function (msg) {\n      var text = String(msg || '');\n\n      if (!text)\n        return;\n\n      socket.get('name', function (err, name) {\n        var data = {\n          name: name,\n          text: text\n        };\n\n        broadcast('message', data);\n        messages.push(data);\n        console.log(data.text);\n        \n         //pull file name, body if a file was returned\n        function isThere(data){\n        try {\n          if(data['matching_results'] == 0)\n          {\n            return;\n          }\n        var docName = data.results[0].extracted_metadata.filename;\n        var docBody = data.results[0].html;\n          return docName, docBody;\n          \n        } catch(e) {\n        console.log(\"error; undefined\");\n                    }\n                              }\n        \n        socket.emit('buildField');\n        \n      discovery.query(\n      //here's the query itself\n      { \n        environment_id: 'be9e9b77-6d60-4c3d-a849-fa6b44343b72', \n        collection_id: '3a0fb7ea-a29b-44b0-8038-c3b235ac15df', \n        natural_language_query: data.text, count: 1\n      }, \n      function(error, data) {\n        if(error) return;\n        //function with generic error handling to do things with the data - currently sends the full json to the console and an okay to the webpage\n      var clubDoc = JSON.stringify(data, null, 2);\n      console.log(clubDoc);\n      var suggestion = isThere(data);\n      //send suggestion name, anything else we want to build with\n      socket.emit('sendClubs', {suggestion});\n      });\n      \n      discovery.query(\n        //here's the query itself\n      { environment_id: 'be9e9b77-6d60-4c3d-a849-fa6b44343b72', collection_id: '05267db0-53c9-461a-948b-46ae4449add2', natural_language_query: data.text, count: 1}, \n      function(error, data) {\n        if(error) return;\n        //function with generic error handling to do things with the data - currently sends the full json to the console and an okay to the webpage\n      var constitutionDoc = JSON.stringify(data, null, 2);\n      console.log(constitutionDoc);\n      //pull file name if a file was returned - covers edge test cases\n      var suggestion = isThere(data);\n        console.log(suggestion);\n        //send suggestion name, anything else we want to build with\n      socket.emit('sendClubs', {suggestion});\n      });\n      \n      \n      \n      \n      });\n    });\n\n    socket.on('identify', function (name) {\n      socket.set('name', String(name || 'Anonymous'), function (err) {\n        updateRoster();\n      });\n    });\n  });\n\nfunction updateRoster() {\n  async.map(\n    sockets,\n    function (socket, callback) {\n      socket.get('name', callback);\n    },\n    function (err, names) {\n      broadcast('roster', names);\n    }\n  );\n}\n\nfunction broadcast(event, data) {\n  sockets.forEach(function (socket) {\n    socket.emit(event, data);\n  });\n}\n\nserver.listen(process.env.PORT || 3000, process.env.IP || \"0.0.0.0\", function(){\n  var addr = server.address();\n  console.log(\"Chat server listening at\", addr.address + \":\" + addr.port);\n});\n\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":600,"scrollleft":0,"selection":{"start":{"row":82,"column":16},"end":{"row":82,"column":16},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":41,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1512488606959}